apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

//TODO Once android builds are stable. Consider removing commented code.
project.ext.react = [
        entryFile: "index.js",
	    enableHermes: true,  // clean and rebuild if changing
]
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

apply from: "../../node_modules/react-native/react.gradle"


/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", true);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    packagingOptions{
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'

        if (enableHermes) {
            exclude '**/libjsc*.so'
        }
    }

    defaultConfig {
        applicationId "me.connect"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode 70211
        versionName "1.5.6"
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
            incremental = false; //If you see any build issues, try uncommenting this line development phases. Do not commit this line uncommented
        }

        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // configure branch keys
        manifestPlaceholders = [BRANCH_LIVE_KEY: "key_live_gcrCKTHBKlx7N31qxgq33bpmzupAwr1q",
                                BRANCH_TEST_KEY:"key_test_fnzEMTMuTnr6HZWEBbJVOmfhsymtrs8S"]
        // fix react-native-camera
        missingDimensionStrategy 'react-native-camera', 'general'
        // fix react-native-blur
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        release {
            // we need this configuration for fastlane step workflow in bitrise.
            storeFile file(System.getenv("HOME") + "/keystores/my_keystore.jks")
            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
        }
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
            storeFile file('../keystores/debug.keystore')
        }
    }
   splits {
       abi {
           reset()
           enable enableSeparateBuildPerCPUArchitecture
           universalApk false  // If true, also generate a universal APK
           include "x86" , "armeabi-v7a", "arm64-v8a", "x86_64"
       }
   }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

}

// Map for the version code that gives each ABI a value.
// [ABI_NUMBER] is 10 - 10 for 'x86', 11 for 'armeabi-v7a', 12 for 'arm64-v8a', 13 for 'x86_64' - a two
// digit number to represent the CPU architecture or Application Binary Interface
ext.abiCodes = ['x86':'10', 'armeabi-v7a':'11', 'arm64-v8a':'12', 'x86_64':'13']
android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
    // https://developer.android.com/studio/build/configure-apk-splits.html
    // Determines the ABI for this variant and returns the mapped value.
    def endingAbiCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

    // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
    // the following code does not override the version code for universal APKs.
    // However, because we want universal APKs to have the lowest version code,
    // this outcome is desirable.
    if (endingAbiCode != null) {

      // Assigns the new version code to versionCodeOverride, which changes the version code
      // for only the output APK, not for the variant itself. Skipping this step simply
      // causes Gradle to use the value of variant.versionCode for the APK.
      def nextVersionCode = variant.versionCode.toString() + endingAbiCode
      output.versionCodeOverride = nextVersionCode.toInteger()
    }
  }
}
dependencies {

    androidTestImplementation('com.wix:detox:+')

    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'

    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation "com.facebook.react:react-native:+"

    // our indy module needs these packages
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.palette:palette:1.0.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation 'net.java.dev.jna:jna:4.5.0@aar'
    implementation 'net.sourceforge.streamsupport:android-retrostreams:1.6.2'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.59'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.annotation:annotation:1.0.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation "com.jumio.android:core:3.9.1@aar"
    implementation "com.jumio.android:nv:3.9.1@aar"
    implementation "com.jumio.android:nv-mrz:3.9.1@aar"
    implementation "com.jumio.android:nv-ocr:3.9.1@aar"
    implementation "com.jumio.android:nv-nfc:3.9.1@aar"
    implementation "com.jumio.android:nv-barcode:3.9.1@aar"
    implementation "com.jumio.android:iproov:3.9.1@aar"

    implementation ("com.iproov.sdk:iproov:6.3.1"){
        exclude group: 'org.json', module:'json'
    }

    implementation ("io.socket:socket.io-client:0.9.0") {
            exclude group: 'org.json', module: 'json'
        }

    implementation "org.jmrtd:jmrtd:0.7.24"
    implementation "org.bouncycastle:bcprov-jdk15on:1.67"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.0"

    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.room:room-runtime:2.2.6"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.core:core-ktx:1.3.2"

    implementation "com.google.android.material:material:1.2.1"


    // react-navigation
    // react-native-screens
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'

    // TODO:KS Remove gif support from our app, as of now we are using gif for loading spinner, we can directly use ActivityIndicator from react-native and remove these dependencies
    // Watch for these: fresco:1.10.0 and animated-gif:1.10.0 when upgrading RN
    implementation 'com.facebook.fresco:fresco:1.10.0'
    implementation 'com.facebook.fresco:animated-gif:1.10.0'
    implementation "com.facebook.fresco:animated-base-support:1.3.0"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
