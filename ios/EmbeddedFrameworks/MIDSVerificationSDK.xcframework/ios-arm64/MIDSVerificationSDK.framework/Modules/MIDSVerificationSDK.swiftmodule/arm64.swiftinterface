// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MIDSVerificationSDK
import AVFoundation
import Foundation
import JumioCore
import JumioIProov
import Netverify
import Swift
import UIKit
import iProov
open class VerifyError {
  public var errorMessage: Swift.String?
  public var errorCode: Swift.Int?
  public init()
  public init(error: Netverify.NetverifyError?)
  public func cameraError()
  public func rootedError()
  public func reInitializationError()
  @objc deinit
}
public enum MIDSUserBiometricConsent : Swift.String {
  case success
  case failure
  case na
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum MIDSVerificationEventResult : Swift.String {
  case success
  case failure
  case error
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum MIDSVerificationEventType : Swift.String {
  case log
  case audit
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol MIDSVerificationAuditDelegate {
  @objc optional func receivedEvent(userProfileID: Swift.String, sessionID: Swift.String, softwareVersion: Swift.String, transactionGroupId: Swift.String, eventGeneratedSource: Swift.String, privacyPolicyVersion: Swift.String, userBiometricConsent: Swift.String, event: Swift.String, eventType: Swift.String, logEventType: Swift.String, result: Swift.String, logRequestFlow: Swift.String, type: Swift.String)
}
public protocol EnrollmentDelegate {
  func midsEnrollmentManager(didFinishInitializationSuccess status: Swift.Bool)
  func midsEnrollmentManager(didFinishInitializationWithError error: MIDSVerificationSDK.VerifyError)
  func midsEnrollmentManager(didDetermineNextScanViewController scanViewController: MIDSVerificationSDK.CustomScanViewController, isFallback: Swift.Bool)
  func midsEnrollmentManager(scanViewController: MIDSVerificationSDK.CustomScanViewController, shouldDisplayNoUSAddressFoundHint message: Swift.String, confirmation: @escaping () -> Swift.Void)
  func midsEnrollmentManager(scanViewController: MIDSVerificationSDK.CustomScanViewController, shouldDisplayHelpWithText message: Swift.String, animationView: UIKit.UIView)
  func midsEnrollmentManager(shouldDisplayConfirmationWith view: UIKit.UIView, text: Swift.String, currentStep: Swift.Int, totalSteps: Swift.Int, retryEnabled: Swift.Bool, confirmEnabled: Swift.Bool, confirmation: (() -> Swift.Void)?, retake: (() -> Swift.Void)?)
  func midsEnrollmentManager(didStartBiometricAnalysis scanViewController: MIDSVerificationSDK.CustomScanViewController)
  func midsEnrollmentManager(didCaptureAllParts status: Swift.Bool)
  func midsEnrollmentManager(didFinishScanningWith reference: Swift.String, accountId: Swift.String?, authenticationResult: Swift.Bool?)
  func midsEnrollmentManager(didCancelWithError error: MIDSVerificationSDK.VerifyError)
  func midsEnrollmentManager(customScanViewControllerWillPrepareIProovController scanViewController: MIDSVerificationSDK.CustomScanViewController)
  func midsEnrollmentManager(customScanViewControllerWillPresentIProovController scanViewController: MIDSVerificationSDK.CustomScanViewController)
}
public enum DataCenter : Swift.UInt32 {
  case MIDSDataCenterUS
  case MIDSDataCenterEU
  case MIDSDataCenterSG
  public typealias RawValue = Swift.UInt32
  public init?(rawValue: Swift.UInt32)
  public var rawValue: Swift.UInt32 {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EnrollmentManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var enrollmentDelegate: MIDSVerificationSDK.EnrollmentDelegate!
  final public var sessionId: Swift.String?
  final public var transactionGroupId: Swift.String?
  public var userProfileID: Swift.String?
  public var countries: [MIDSVerificationSDK.VerifyCountry]
  public static func shared(sessionId: Swift.String? = nil, transactionGroupId: Swift.String? = nil, userProfileID: Swift.String? = nil, delegate: MIDSVerificationSDK.MIDSVerificationAuditDelegate? = nil) -> MIDSVerificationSDK.EnrollmentManager
  public func isMIDSVerifySDKInitialized() -> Swift.Bool
  public func initializeMIDSVerifySDK(sdkToken: Swift.String, dataCenter: MIDSVerificationSDK.DataCenter = .MIDSDataCenterSG)
  public func getSDKVersion() -> Swift.String
  public func getCountryList() -> [MIDSVerificationSDK.VerifyCountry]
  public func getDocumentTypes(countryCode: Swift.String) -> [Swift.String]?
  public func cancelScan()
  public func terminateSDK()
  public func netverifyViewController(_ netverifyViewController: Netverify.NetverifyViewController, didCancelWithError error: Netverify.NetverifyError?, scanReference: Swift.String?)
  public func startScan(document: Swift.String, privacyPolicyVersion: Swift.String, userBiometricConsent: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CustomScanViewController : UIKit.UIViewController {
  public var customScanViewController: Netverify.NetverifyCustomScanViewController?
  public var customOverlayLayer: UIKit.UIView? {
    get
  }
  @objc override dynamic public func viewDidLoad()
  public func currentScanMode() -> Netverify.NetverifyScanMode
  public func retryScan()
  public func pauseScan()
  public func hasFlash() -> Swift.Bool?
  public func hasMultipleCameras() -> Swift.Bool?
  public func isFlashOn() -> Swift.Bool?
  public func canToggleFlash() -> Swift.Bool?
  public func toggleFlash()
  public func canSwitchCamera() -> Swift.Bool?
  public func switchCamera()
  public func currentStep() -> Swift.UInt?
  public func totalSteps() -> Swift.UInt?
  public func isFallbackAvailable() -> Swift.Bool?
  public func switchToFallback()
  public func localizedShortHelpText() -> Swift.String?
  public func localizedLongHelpText() -> Swift.String?
  public var verticalRoiOffset: CoreGraphics.CGFloat? {
    get
    set
  }
  public var brandingLogoTopMargin: CoreGraphics.CGFloat? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension EnrollmentManager : Netverify.NetverifyCustomScanViewControllerDelegate {
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayLegalAdvice message: Swift.String, completion: @escaping () -> Swift.Void)
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayConfirmationWith view: Netverify.NetverifyConfirmationImageView, type: Netverify.NetverifyConfirmationType, text: Swift.String, confirmation: (() -> Swift.Void)?, retake: (() -> Swift.Void)? = nil)
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayNoUSAddressFoundHint message: Swift.String, confirmation: @escaping () -> Swift.Void)
  @objc dynamic public func netverifyCustomScanViewControllerStartedBiometricAnalysis(_ customScanView: Netverify.NetverifyCustomScanViewController)
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayHelpWithText message: Swift.String, animationView: UIKit.UIView, for retryReason: JumioCore.JumioFaceRetryReason)
}
@objc @_inheritsConvenienceInitializers public class MIDSUIController : Netverify.NetverifyUIController {
  @objc deinit
  @objc override dynamic public init(configuration: Netverify.NetverifyConfiguration)
  @objc override dynamic public init()
}
extension EnrollmentManager : Netverify.NetverifyUIControllerDelegate {
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didFinishWith didFinishWithdocumentData: Netverify.NetverifyDocumentData, scanReference: Swift.String, accountId: Swift.String?, authenticationResult: Swift.Bool)
  @objc dynamic public func netverifyCustomScanViewControllerWillPrepareIProovController(_ customScanView: Netverify.NetverifyCustomScanViewController)
  @objc dynamic public func netverifyCustomScanViewControllerWillPresentIProovController(_ customScanView: Netverify.NetverifyCustomScanViewController)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didCancelWithError error: Netverify.NetverifyError?, scanReference: Swift.String?, accountId: Swift.String?)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didFinishInitializingWithError error: Netverify.NetverifyError?)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, shouldRequireUserConsentWith url: Foundation.URL)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didDetermineAvailableCountries countries: [Any], suggestedCountry country: Netverify.NetverifyCountry?)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didDetermineNextScanViewController scanViewController: Netverify.NetverifyCustomScanViewController, isFallback: Swift.Bool)
  @objc dynamic public func netverifyUIControllerDidCaptureAllParts(_ netverifyUIController: Netverify.NetverifyUIController)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didDetermineError error: Netverify.NetverifyError, retryPossible: Swift.Bool)
}
public protocol AuthenticationDelegate {
  func midsAuthenticationManager(didFinishInitializationSuccess status: Swift.Bool)
  func midsAuthenticationManager(didFinishInitializationWithError error: MIDSVerificationSDK.VerifyError)
  func midsAuthenticationManager(didDetermineNextScanViewController scanViewController: MIDSVerificationSDK.CustomScanViewController, isFallback: Swift.Bool)
  func midsAuthenticationManager(scanViewController: MIDSVerificationSDK.CustomScanViewController, shouldDisplayNoUSAddressFoundHint message: Swift.String, confirmation: @escaping () -> Swift.Void)
  func midsAuthenticationManager(scanViewController: MIDSVerificationSDK.CustomScanViewController, shouldDisplayHelpWithText message: Swift.String, animationView: UIKit.UIView)
  func midsAuthenticationManager(shouldDisplayConfirmationWith view: UIKit.UIView, text: Swift.String, currentStep: Swift.Int, totalSteps: Swift.Int, retryEnabled: Swift.Bool, confirmEnabled: Swift.Bool, confirmation: (() -> Swift.Void)?, retake: (() -> Swift.Void)?)
  func midsAuthenticationManager(didStartBiometricAnalysis scanViewController: MIDSVerificationSDK.CustomScanViewController)
  func midsAuthenticationManager(didCaptureAllParts status: Swift.Bool)
  func midsAuthenticationManager(didFinishScanningWith reference: Swift.String, accountId: Swift.String?, authenticationResult: Swift.Bool?)
  func midsAuthenticationManager(didCancelWithError error: MIDSVerificationSDK.VerifyError)
  func midsAuthenticationManager(customScanViewControllerWillPrepareIProovController scanViewController: MIDSVerificationSDK.CustomScanViewController)
  func midsAuthenticationManager(customScanViewControllerWillPresentIProovController scanViewController: MIDSVerificationSDK.CustomScanViewController)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AuthenticationManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  final public var sessionId: Swift.String?
  final public var transactionGroupId: Swift.String?
  public var userProfileID: Swift.String?
  public var authenticationDelegate: MIDSVerificationSDK.AuthenticationDelegate!
  public var currentScanView: Netverify.NetverifyCustomScanViewController?
  public static func shared(sessionId: Swift.String? = nil, transactionGroupId: Swift.String? = nil, userProfileID: Swift.String? = nil, delegate: MIDSVerificationSDK.MIDSVerificationAuditDelegate? = nil) -> MIDSVerificationSDK.AuthenticationManager
  public func isSDKInitialized() -> Swift.Bool
  public func reauthenticate(privacyPolicyVersion: Swift.String, userBiometricConsent: Swift.Bool, sdkToken: Swift.String, dataCenter: MIDSVerificationSDK.DataCenter = DataCenter.MIDSDataCenterUS)
  public func cancelScan()
  public func terminateSDK()
  public func getSDKVersion() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AuthenticationCustomScanViewController : UIKit.UIViewController {
  public var scanViewController: Netverify.NetverifyCustomScanViewController?
  @objc override dynamic public func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func retryAfterError()
  public func pauseScan()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension AuthenticationManager : Netverify.NetverifyCustomScanViewControllerDelegate {
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayLegalAdvice message: Swift.String, completion: @escaping () -> Swift.Void)
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayConfirmationWith view: Netverify.NetverifyConfirmationImageView, type: Netverify.NetverifyConfirmationType, text: Swift.String, confirmation: (() -> Swift.Void)?, retake: (() -> Swift.Void)? = nil)
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayNoUSAddressFoundHint message: Swift.String, confirmation: @escaping () -> Swift.Void)
  @objc dynamic public func netverifyCustomScanViewControllerStartedBiometricAnalysis(_ customScanView: Netverify.NetverifyCustomScanViewController)
  @objc dynamic public func netverifyCustomScanViewController(_ customScanView: Netverify.NetverifyCustomScanViewController, shouldDisplayHelpWithText message: Swift.String, animationView: UIKit.UIView, for retryReason: JumioCore.JumioFaceRetryReason)
}
extension AuthenticationManager : Netverify.NetverifyUIControllerDelegate {
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didFinishWith didFinishWithdocumentData: Netverify.NetverifyDocumentData, scanReference: Swift.String, accountId: Swift.String?, authenticationResult: Swift.Bool)
  @objc dynamic public func netverifyCustomScanViewControllerWillPrepareIProovController(_ customScanView: Netverify.NetverifyCustomScanViewController)
  @objc dynamic public func netverifyCustomScanViewControllerWillPresentIProovController(_ customScanView: Netverify.NetverifyCustomScanViewController)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didCancelWithError error: Netverify.NetverifyError?, scanReference: Swift.String?, accountId: Swift.String?)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didFinishInitializingWithError error: Netverify.NetverifyError?)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, shouldRequireUserConsentWith url: Foundation.URL)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didDetermineAvailableCountries countries: [Any], suggestedCountry country: Netverify.NetverifyCountry?)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didDetermineNextScanViewController scanViewController: Netverify.NetverifyCustomScanViewController, isFallback: Swift.Bool)
  @objc dynamic public func netverifyUIControllerDidCaptureAllParts(_ netverifyUIController: Netverify.NetverifyUIController)
  @objc dynamic public func netverifyUIController(_ netverifyUIController: Netverify.NetverifyUIController, didDetermineError error: Netverify.NetverifyError, retryPossible: Swift.Bool)
}
open class VerifyCountry {
  public init(name: Swift.String, code: Swift.String)
  public var countryName: Swift.String?
  public var countryCode: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class VerifyScanViewController : Netverify.NetverifyCustomScanViewController {
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class Appearence : ObjectiveC.NSObject {
  public func setNavigvationBarColor(color: UIKit.UIColor)
  public func setNavigationBarTitleImageView(image: UIKit.UIImage)
  public func setDocumnetScanBackgroundColor(color: UIKit.UIColor)
  public func deactivateBlur()
  public func enableDarkMode()
  public func setFaceScanBackgroundColor(color: UIKit.UIColor)
  public func setFaceScanForegroundColorColor(color: UIKit.UIColor)
  public func setFaceScanFaceProgressColor(color: UIKit.UIColor)
  public func setIProovHeaderTextColor(color: UIKit.UIColor)
  public func setIProovHeaderBackgroundColor(color: UIKit.UIColor)
  public func setIProovCloseButtonTintColor(color: UIKit.UIColor)
  public func setIProovFooterTextColor(color: UIKit.UIColor)
  public func setIProovFooterBackgroundColor(color: UIKit.UIColor)
  public func setIProovLivenessScanningTintColorr(color: UIKit.UIColor)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class VerifyISOCountryConverter : ObjectiveC.NSObject {
  public static func convert(countryCode: Swift.String) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
open class VerifyDocumentType {
  public init(doc: [Netverify.NetverifyDocument])
  public func keys() -> [Swift.String]
  public var docType: Foundation.NSMutableDictionary
  @objc deinit
}
extension MIDSVerificationSDK.MIDSUserBiometricConsent : Swift.Equatable {}
extension MIDSVerificationSDK.MIDSUserBiometricConsent : Swift.Hashable {}
extension MIDSVerificationSDK.MIDSUserBiometricConsent : Swift.RawRepresentable {}
extension MIDSVerificationSDK.MIDSVerificationEventResult : Swift.Equatable {}
extension MIDSVerificationSDK.MIDSVerificationEventResult : Swift.Hashable {}
extension MIDSVerificationSDK.MIDSVerificationEventResult : Swift.RawRepresentable {}
extension MIDSVerificationSDK.MIDSVerificationEventType : Swift.Equatable {}
extension MIDSVerificationSDK.MIDSVerificationEventType : Swift.Hashable {}
extension MIDSVerificationSDK.MIDSVerificationEventType : Swift.RawRepresentable {}
extension MIDSVerificationSDK.DataCenter : Swift.Equatable {}
extension MIDSVerificationSDK.DataCenter : Swift.Hashable {}
extension MIDSVerificationSDK.DataCenter : Swift.RawRepresentable {}
