default_platform :ios

platform :ios do
  build_type = "QAConnectMe Build"

  before_all do
    unless ENV["SLACK_CREDENTIAL"].nil?
      ENV["SLACK_URL"] = "https://hooks.slack.com/services/#{ENV["SLACK_CREDENTIAL"]}"
    end
  end

  after_all do |lane|
    unless ENV["SLACK_CREDENTIAL"].nil?
      commit_message = ENV["currentBuild.changeSets"]
      build_number = get_build_number(xcodeproj: "ConnectMe.xcodeproj")
      slack(channel: "connectme_build", message: "#{build_type} ##{build_number} #{commit_message}")
    end
  end

  error do |lane, exception|
    unless ENV["SLACK_CREDENTIAL"].nil?
      msg = exception.to_s
      msg = msg.encode('utf-8', :invalid => :replace, :undef => :replace, :replace => '_')
      payloadMsg = exception.error_info.to_s
      payloadMsg = payloadMsg.encode('utf-8', :invalid => :replace, :undef => :replace, :replace => '_')
      slack(
        channel: "connectme_build",
        message: msg,
        success: false,
        payload: { "Output" => payloadMsg }
      )
    end
  end

  lane :build do
    cocoapods(
      try_repo_update_on_error: true,
    )

    version_number = project_version_bump

    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    adhoc_build(
      app_identifier: "#{app_identifier}",
    )

    appstore_build(
      app_identifier: "#{app_identifier}",
    )
  end

  lane :upload do
    appcenter_token = ENV["APPCENTER_API_TOKEN"]
    UI.user_error!("You didn't set token for AppCenter") if appcenter_token.empty?
    build_type = ENV["BUILD_TYPE"] || "#{build_type}"
    appcenter_upload(api_token: ENV["APPCENTER_API_TOKEN"], owner_type: "user", app_name: "QA-ConnectMe", ipa: "ConnectMe-appstore.ipa")

    api_key = app_store_connect_api_key()

    deliver(
      ipa: "ConnectMe-appstore.ipa",
      api_key: api_key,
      force: true,
      skip_metadata: true,
      skip_screenshots: true,
      skip_app_version_update: true,
      run_precheck_before_submit: false
    )
  end

  #==============================================#
  #                PRIVATE LANES                 #
  #==============================================#

  ##### ----- PROJECT_VERSION_BUMP ----- #####
  private_lane :project_version_bump do
    prefix = "80"
    ci_pipeline_id = prefix + ENV["CI_PIPELINE_IID"]
    buildNumber = increment_build_number(build_number: ci_pipeline_id, xcodeproj: "ConnectMe.xcodeproj")
    puts 'new build number: ' + buildNumber
    # we are fixing the version number as of now
    # any version number change has to be manual
    version_number = "1.7.0"
    versionNumber = increment_version_number(version_number: version_number, xcodeproj: "ConnectMe.xcodeproj")
    puts 'new version number: ' + versionNumber

    versionNumber.to_s + "-" + buildNumber.to_s
  end

  ##### ----- AD HOC MODE BUILD ----- #####
  private_lane :adhoc_build do |options|
    match_certificates(
      type: "adhoc",
      app_identifier: options[:app_identifier]
    )

    compile(
      type: "adhoc",
      app_identifier: options[:app_identifier]
    )
  end

  ##### ----- APPSTORE MODE BUILD ----- #####
  private_lane :appstore_build do |options|
    match_certificates(
      type: "appstore",
      app_identifier: options[:app_identifier]
    )

    compile(
      type: "appstore",
      app_identifier: options[:app_identifier]
    )
  end

  ##### ----- COMPILE ----- #####
  private_lane :compile do |options|
    types = [ "adhoc", "appstore" ]
    type = options[:type]
    unless types.include? type
        UI.user_error!("Please specify a valid type! " + types.inspect)
    end

    profile = ENV["sigh_#{options[:app_identifier]}_#{type}"]
    disable_automatic_code_signing(path: "ConnectMe.xcodeproj")

    if type == "adhoc"
      ipaName = "ConnectMe.ipa"
    end

    if type == "appstore"
      ipaName = "ConnectMe-appstore.ipa"
    end

    gym(
      scheme: "ConnectMe",
      clean: true,
      output_name: ipaName
    )
  end

  ##### ----- MATCH_CERTIFICATES ----- #####
  private_lane :match_certificates do |options|

    types = [ "development", "adhoc", "appstore" ]
    type = options[:type]

    unless types.include? type
      UI.user_error!("Please specify a valid type! " + types.inspect)
    end

    api_key = app_store_connect_api_key()

    match(
      type: "#{type}",
      app_identifier: "#{options[:app_identifier]}",
      force_for_new_devices: true,
      api_key: api_key
    )

  end

end
